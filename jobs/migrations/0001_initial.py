# Generated by Django 5.2.1 on 2025-05-22 03:30

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Company",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=255, verbose_name="Nom de l'entreprise"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                ("website", models.URLField(blank=True, verbose_name="Site web")),
                (
                    "logo",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="company_logos/",
                        verbose_name="Logo",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Entreprise",
                "verbose_name_plural": "Entreprises",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("collector", "Collecteur"),
                            ("recruiter", "Recruteur"),
                            ("buyer", "Acheteur"),
                        ],
                        default="collector",
                        max_length=20,
                    ),
                ),
                ("phone", models.CharField(blank=True, max_length=20)),
                (
                    "profile_picture",
                    models.ImageField(blank=True, null=True, upload_to="profile_pics/"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Utilisateur",
                "verbose_name_plural": "Utilisateurs",
                "swappable": "AUTH_USER_MODEL",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Candidate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("bio", models.TextField(blank=True, null=True)),
                ("education", models.TextField(blank=True, null=True)),
                ("experience", models.TextField(blank=True, null=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="candidate_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="JobOffer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(max_length=255, verbose_name="Titre du poste"),
                ),
                ("description", models.TextField(verbose_name="Description")),
                (
                    "location",
                    models.CharField(max_length=255, verbose_name="Localisation"),
                ),
                (
                    "contract_type",
                    models.CharField(
                        choices=[
                            ("FT", "Temps plein"),
                            ("PT", "Temps partiel"),
                            ("CT", "Contrat temporaire"),
                            ("IN", "Stage"),
                            ("FL", "Freelance"),
                        ],
                        max_length=2,
                        verbose_name="Type de contrat",
                    ),
                ),
                (
                    "salary",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Salaire",
                    ),
                ),
                (
                    "requirements",
                    models.TextField(blank=True, verbose_name="Exigences"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Active")),
                (
                    "published_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de publication"
                    ),
                ),
                (
                    "deadline",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date limite"
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="job_offers",
                        to="jobs.company",
                        verbose_name="Entreprise",
                    ),
                ),
            ],
            options={
                "verbose_name": "Offre d'emploi",
                "verbose_name_plural": "Offres d'emploi",
                "ordering": ["-published_at"],
            },
        ),
        migrations.CreateModel(
            name="Application",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "cover_letter",
                    models.TextField(blank=True, verbose_name="Lettre de motivation"),
                ),
                (
                    "cv",
                    models.FileField(
                        upload_to="cvs/%Y/%m/%d/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                ["pdf", "doc", "docx"]
                            )
                        ],
                        verbose_name="CV",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "En attente"),
                            ("reviewed", "Examinée"),
                            ("interview", "Entretien"),
                            ("accepted", "Acceptée"),
                            ("rejected", "Rejetée"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="Statut",
                    ),
                ),
                (
                    "applied_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de candidature"
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Dernière mise à jour"
                    ),
                ),
                (
                    "candidate",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="applications",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Candidat",
                    ),
                ),
                (
                    "job_offer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="applications",
                        to="jobs.joboffer",
                        verbose_name="Offre d'emploi",
                    ),
                ),
            ],
            options={
                "verbose_name": "Candidature",
                "verbose_name_plural": "Candidatures",
                "ordering": ["-applied_at"],
            },
        ),
        migrations.AddIndex(
            model_name="joboffer",
            index=models.Index(
                fields=["-published_at"], name="jobs_joboff_publish_ccb91d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="joboffer",
            index=models.Index(
                fields=["is_active"], name="jobs_joboff_is_acti_c32cfc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="application",
            index=models.Index(
                fields=["-applied_at"], name="jobs_applic_applied_286417_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="application",
            index=models.Index(fields=["status"], name="jobs_applic_status_f83260_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="application",
            unique_together={("candidate", "job_offer")},
        ),
    ]
